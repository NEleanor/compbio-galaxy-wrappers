<tool id="post_freak" name="Freak Post Processing" version="@VERSION@.0" profile="17.09">

    <description>Post Processing for Freak Output</description>

    <macros>
        <import>macros.xml</import>
    </macros>

    @VERSION_CMD@

    <expand macro="requirements"/>

    <command detect_errors="exit_code"><![CDATA[
    python3 $run
    ]]></command>

    <configfiles>
        <configfile name="run">
import pandas as pd

def identity(freak, ref):
    '''
    An "identity" function which return the Freak output and reference file 
    without altering them. Used as a default function in the argparser.
    '''
    return freak, ref

    
def remove_false_calls(freak, ref):
    '''
    Removes rows from the Freak output file which have bases that do not match 
    the reference file, returns the modified Freak file and the reference as 
    a tuple
    '''
    result = freak.merge(ref, how='inner', on=['Chromosome','Position Start','Variant Base'])
    result = result.loc[:,freak.columns]
    return result, ref

# Read in Freak's output and the reference 
freak_out = pd.read_csv("$freak_data", sep='\t', header=0).astype(str)
variant_ref = pd.read_csv("$genetrails_reference", sep='\t', header=0).astype(str)
variant_subset = variant_ref[variant_ref['Sample Code']=="$sample_id"].copy()
# Relabel freak data columns
freak_out.rename(columns={'rname':'Chromosome',
                          'start (1-based, inclusive)':'Position Start',
                          'variant': 'Variant Base'},
                 inplace=True)
# Set up the chromosome columns to match
variant_subset.loc[:,'Chromosome'] = variant_subset['Chromosome'].map(lambda x: x[3:])

# Apply all of the appropriate filters 
#if $filters.remove_false
freak_out, variant_subset = remove_false_calls(freak_out, variant_subset)
#end if

# Return the labels of the freak data to their old values
freak_out.rename(columns={'Chromosome': 'rname',
                          'Position Start': 'start (1-based, inclusive)',
                          'Variant Base': 'variant'},
                 inplace=True)

# Output the results of the post processing
freak_out.to_csv(path_or_buf='$output', sep='\t',index=False)
        </configfile>
    </configfiles>

    <inputs>
        <param type="data" name="freak_data" format="txt,tsv,tabular" label="Freak Output" help=""/>
        <param type="data" name="genetrails_reference" format="txt,tsv,tabular" label="GeneTrails Variant File" help=""/>
        <param type="text" name="sample_id" label="Sample ID" help=""/>
        <section name="filters" label="Filters">
            <param type="boolean" name="remove_false" default="true" label="Remove False Variants Base Calls" help="Removes rows from the Freak output which have variant bases not found in the reference" />
        </section>
    </inputs>

    <outputs>
        <data name="output" format="tsv" label="${tool.name} on ${on_string}"/>
    </outputs>

    <tests>
        <test>
            <param name="freak_data" value="dummy_freak_34.tsv"/>
            <param name="ref" value="dummy_ref.tsv"/>
            <param name="sample_id" value="34"/>
            <output name="output" file="processed_freak_34.tsv"/>
        </test>
    </tests>


    <help><![CDATA[
    usage: post_processing_freak.py [-h] [-d] [-o OUTPUT] freak_out variant_ref
    
    Post processing for freak output
    
    positional arguments:
      freak_out
      variant_ref
    
    optional arguments:
      -h, --help            show this help message and exit
      -d, --no-dups
      -o OUTPUT, --output OUTPUT
    ]]></help>
</tool>
