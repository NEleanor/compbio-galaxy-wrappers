<tool id="star_fusion" name="STAR-Fusion" version="1.8.1.0">
    <description>detect fusion genes in RNA-Seq data</description>
    <requirements>
        <requirement type="package" version="1.8.1">star-fusion</requirement>
        <requirement type="package" version="0.1.19">samtools</requirement>
        <requirement type="package" version="3.2">hmmer</requirement>
        <requirement type="package" version="2.7.2b">star</requirement>
    </requirements>

    <stdio>
        <regex match="command not found" source="stderr" level="fatal"/>
        <regex match="EXITING because of INPUT ERROR" source="stderr" level="fatal"/>
        <regex match="FATAL ERROR" source="stderr" level="fatal"/>
        
        <regex match="Warning:" source="stderr" level="warning"/>
        <regex match="CMD:" source="stderr" level="warning"/>
        
        <regex match="-done creating index file:" source="stderr" level="warning"/>
        <regex match="-parsing GTF file:" source="stderr" level="warning"/>
        <regex match="-building interval tree" source="stderr" level="warning"/>
        <regex match="-parsing fusion evidence:" source="stderr" level="warning"/>
        <regex match="-mapping reads to genes" source="stderr" level="warning"/>
        <regex match="-outputting fusion candidates to file:" source="stderr" level="warning"/>
        
        <regex match="Process complete" source="stderr" level="warning"/>
    </stdio>

    <command detect_errors="exit_code"><![CDATA[

        ## 1. create reference index - using \$(pwd) is necessary, probably because the perl script changes work directory
        #if $genome_lib_type.genome_lib_type_selector == "build_lib":
            prep_genome_lib.pl
            --genome_fa '${genome_lib_type.fasta_type.ownFile.fields.path}'
            --gtf '${geneModel}'
            --blast_pairs "{blast_pairs}"
            --CPU 8
            --output_dir "\$(pwd)/tmp_star_fusion_genome_dir"
            &&
        #end if

        ## 3. Run STAR-Fusion
        STAR-Fusion
            #if str($input_params.input_source) == "use_chimeric":
                --chimeric_junction '${input_params.chimeric_junction}'
                --left_fq '${input_params.left_fq}'
            #end if
            #if str($input_params.input_source) == "use_fastq":
                --left_fq '${input_params.left_fq}'
            #end if
            #if $input_params.right_fq:
                --right_fq '${input_params.right_fq}'
            #end if

         #if $genome_lib_type.genome_lib_type_selector == "build_lib":
             --genome_lib_dir "\$(pwd)/ctat_genome_lib_build_dir"
         #else if $genome_lib_type.genome_lib_type_selector == "prebuilt":
             --genome_lib_dir ${genome_lib_type.prebuilt_lib.fields.path}
         #end if
        #if str($params.settingsType) == "full":
            --min_junction_reads $params.min_junction_reads
            --min_sum_frags $params.min_sum_frags
            --max_promiscuity $params.max_promiscuity
            --min_novel_junction_support $params.min_novel_junction_support
            --min_alt_pct_junction $params.min_alt_pct_junction
            --aggregate_novel_junction_dist $params.aggregate_novel_junction_dist
            --E $params.E
        #end if
    ]]></command>

    <inputs>
        <conditional name="input_params">
            <param name="input_source" type="select" label="Use output from earlier STAR run or let STAR Fusion control running STAR">
                <option value="use_chimeric">Use output from earlier STAR</option>
                <option value="use_fastq">Let STAR Fusion control running STAR</option>
            </param>
            <when value="use_chimeric">
                <param name="chimeric_junction" type="data" format="interval" argument="--chimeric_junction" label="Chimeric junction file from STAR (with STAR-Fusion settings)"/>
                <param name="left_fq" type="data" format="fastq,fastqsanger,fastqsanger.gz" optional="true" argument="--left_fq" label="left.fq file" help="include the left and right fastqs with the Chimeric.out.junction in order to compute the FFPM (normalized fusion fragments per million total rna-seq fragments) values in your summary report. Otherwise, you'll just get evidence fragment counts without the normalized values (empty fusion_candidates.final.abridged.FFPM file)"/>
                <param name="right_fq" type="data" optional="true" format="fastq,fastqsanger,fastqsanger.gz" argument="--right_fq" label="right.fq file"/>
            </when>
            <when value="use_fastq">
                <param name="left_fq" type="data" format="fastq,fastqsanger,fastqsanger.gz" argument="--left_fq" label="left.fq file"/>
                <param name="right_fq" type="data" format="fastq,fastqsanger,fastqsanger.gz" optional="true" argument="--right_fq" label="right.fq file (actually optional, but highly recommended)"/>
            </when>
        </conditional>

        <!-- Genome source. -->
        <conditional name="genome_lib_type">
            <param name="genome_lib_type_selector" type="select" label="Genome library source">
                <option value="prebuilt">Pre-built library</option>
                <option value="build_lib">Build Library</option>
            </param>
            <when value="build_lib">
                <conditional name="fasta_type">
                    <param name="fasta_type_selector" type="select" label="Source for sequence to search">
                        <option value="cached">Locally Cached sequences</option>
                        <option value="history" selected="true">Sequences from your history</option>
                    </param>
                    <when value="cached">
                        <param name="ownFile" type="select" label="Genome to search">
                             <options from_data_table="all_fasta">
                                 <column name="dbkey" index="1"/>
				 <column name="name" index="2"/>
				 <column name="value" index="3"/>
                             </options>
			</param>
                    </when>
                    <when value="history">
                        <param name="ownFile" type="data" format="fasta" label="Select the reference genome (FASTA file)"/>
                    </when>
                </conditional>
        
		<param name="geneModel" type="data" format="gff3,gtf" label="Gene model (gff3,gtf) file for splice junctions and fusion gene detection"/>
		<param name="blast_pairs" type="data" format="tabular" label="Result of BLAST+-blastn of the reference fasta sequence with itself" help="Run blastn with '-outputfmt 6' or choose 'Tabular (standard 12 columns)' in the Galaxy wrapper. For human data it is recommended to obtain it from here: https://data.broadinstitute.org/Trinity/CTAT_RESOURCE_LIB/"/>
            </when>
            <when value="prebuilt">
                <param name="prebuilt_lib" type="select" label="Genome library to search">
                    <options from_data_table="starfusion_indexes">
                        <validator type="no_options" message="A pre-built STAR-fusion genome library is not available for the build associated with the selected input file"/>
                    </options>
                </param>
            </when>
	</conditional>
        <conditional name="params">
            <param name="settingsType" type="select" label="Settings to use" help="You can use the default settings or set custom values for any STAR Fusion parameter.">
                <option value="default" selected="true">Use Defaults</option>
                <option value="full">Full parameter list</option>
            </param>
	    <when value="default" />
            <when value="full"><!-- Full/advanced params. -->
                <param name="min_junction_reads" type="integer" value="1" label="minimum number of junction-spanning reads required." argument="--min_junction_reads"/>
                <param name="min_sum_frags" type="integer" value="2" label="minimum fusion support = (#junction_reads + #spanning_frags)" argument="--min_sum_frags"/>
                <param name="max_promiscuity" type="integer" value="3" label="maximum number of partners allowed for a given fusion" argument="--max_promiscuity"/>
                <param name="min_novel_junction_support" type="integer" value="3" label="minimum of 3 junction reads required if breakpoint lacks involvement of only reference junctions" argument="--min_novel_junction_support"/>
                <param name="min_alt_pct_junction" type="float" value="10.0" label="10% of the dominant isoform junction support" argument="--min_alt_pct_junction"/>
                <param name="aggregate_novel_junction_dist" type="integer" value="5" label="non-ref junctions within 5 are merged into single calls" argument="--aggregate_novel_junction_dist"/>
                <param name="E" type="float" value="0.001" label="E-value threshold for blast searches" argument="-E"/>
            </when>
        </conditional>
    </inputs>

    <outputs>
        <data format="tabular" name="output_final" label="${tool.name} on ${on_string}: fusion_candidates" from_work_dir="star-fusion.fusion_candidates.final"/>
        <data format="tabular" name="output_final_fpkm" label="${tool.name} on ${on_string}: fusion_candidates.abridged.FFPM" from_work_dir="star-fusion.fusion_candidates.final.abridged.FFPM"/>
        <data format="tabular" name="pre_blast_filt_info" label="${tool.name} on ${on_string}: fusion_pre_blast_filt_info" from_work_dir="star-fusion.filter.intermediates_dir/star-fusion.pre_blast_filter.filt_info"/>
    </outputs>

    <help>
**What it does**

STAR-Fusion is a component of the Trinity Cancer Transcriptome Analysis Toolkit (CTAT). STAR-Fusion uses the STAR aligner to identify candidate fusion transcripts supported by Illumina reads. STAR-Fusion further processes the output generated by the STAR aligner to map junction reads and spanning reads to a reference annotation set. This tool takes a long time to run because it is building the STAR index on the fly. We can fix this later. 

**Input: files required to run STAR-Fusion**
 - A genome reference sequence (FASTA-format)
 - A corresponding protein-coding gene annotation set (GTF/GFF Format)
 - A last-matching gene pairs file - in Galaxy you can create such files with the *ncbi_blast_plus* tool suite containing *blastn*: https://toolshed.g2.bx.psu.edu/view/devteam/ncbi_blast_plus
 - A STAR chimeric/junction output file - this is optional as STAR Fusion can control running STAR as well.

The authors of STAR Fusion have made some of these files avaialble at: https://data.broadinstitute.org/Trinity/CTAT_RESOURCE_LIB/. The gene annotations in each case are restricted to the protein-coding and lincRNA transcripts.
More info: https://github.com/STAR-Fusion/STAR-Fusion/wiki

    </help>

    <citations>
        <citation type="bibtex">
           @unpublished{star_fusion,
              author = {Brian Haas and Nicolas Stransky and Daniel Nicorici}, 
              title  = {STAR-Fusion},
              url    = {https://github.com/STAR-Fusion/STAR-Fusion}
            }
        </citation>
    </citations>
</tool>
