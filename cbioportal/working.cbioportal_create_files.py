#!/usr/bin/python
"""
Script to create meta_study.txt file
from command line arguments and create
metadata files for each supplied data file 
for cBioPortal importer tool

Error codes:	(-1) - CSV error
 							(-2) - Study directory does not exist
							(-3) - Number of command line args does not match number data files
							(-4) - Invalid genetic_alteration_type
							(-5) - Invalid data file format
							(-6) - Invalid datatype
							(-7) - Invalid genetic_alteration_type/datatype combination
							(-8) - Invalid data filename prefix (missing "data_")
"""
import os
import logging
from optparse import OptionParser
import sys
import cbp_common
import csv


def main():

	# command line args for script
	parser = OptionParser()
	parser.add_option("--dir", dest="directory", help="directory containing data for cBioPortal; metadata files will be created here")
	parser.add_option("--log_level", dest="log_level", default="INFO", help="set logger level (default is warning)")
	parser.add_option("--log_file", dest="log_file", default="/tmp/cbioportal_create_files.log.txt", help="Log file name")
	# command line args for creating meta_study.txt
	parser.add_option("--type_of_cancer", dest="type_of_cancer", help="meta_study.txt: 'type_of_cancer' metadata field")
	parser.add_option("--cancer_study_identifier", dest="cancer_study_identifier", help="meta_study.txt 'cancer_study_identifier' metadata field")
	parser.add_option("--study_name", dest="study_name", help="meta_study.txt 'name' metadata field")
	parser.add_option("--study_description", dest="study_description", help="meta_study.txt 'description' metadata field")
	parser.add_option("--study_citation", dest="study_citation", help="meta_study.txt 'citation' metadata field (optional)")
	parser.add_option("--study_pmid", dest="study_pmid", help="meta_study.txt 'PMID' metadata field (optional)")
	parser.add_option("--study_short_name", dest="study_short_name", help="meta_study.txt 'short_name' metadata field")
	# command line args for creating metadata files for each data file
	parser.add_option("--data_file", action="append", dest="data_file", help="data file for which metadata file will be created")
	parser.add_option("--genetic_alteration_type", action="append", dest="genetic_alteration_type", help="'genetic_alteration_type' metadata field")
	parser.add_option("--datatype", action="append", dest="datatype", help="'datatype' metadata field")
	# args with 'DO NOT USE ARG' in help variable CAN be specified by user
	# but instead are generated by the script (I know there's a better way to do this..but it works for now)
	parser.add_option("--stable_id", action="append", dest="stable_id", default=[], help="DO NOT USE ARG [used internally]")
	parser.add_option("--show_profile", action="append", dest="show_profile", default=[], help="DO NOT USE ARG [used internally]")
	parser.add_option("--profile_name", action="append", dest="profile_name", help="'profile_name' metadata field")
	parser.add_option("--profile_description", action="append", dest="profile_description", help="'profile_description' metadata field")
	parser.add_option("--case_list_name", action="append", dest="case_list_name", default=[], help="DO NOT USE ARG [used internally]")
	parser.add_option("--case_list_description", action="append", dest="case_list_description", default=[], help="DO NOT USE ARG [used internally]")
	(options, args) = parser.parse_args()
	
	
	# check for necessary command line args
	#if not options.directory:
	#	parser.error('directory not given.')
	#elif not options.type_of_cancer:
	#	parser.error('type_of_cancer not given.')
	#elif not options.cancer_study_identifier:
	#	parser.error('cancer_study_identifier not given.')
	#elif not options.study_name:
	#	parser.error('name not given.')
	#elif not options.study_description:
	#	parser.error('description not given')
	#elif not options.study_short_name:
	#	parser.error('short_name not given.')
	#elif not options.data_file:
	#	parser.error('data file not given.')
	#elif not options.genetic_alteration_type:
	#	parser.error('genetic_alteration_type not gvein.')
	#elif not options.datatype:
	#	parser.error('datatype not given.')
	#elif not options.profile_name:
	#	parser.error('profile_name not given')
	#elif not options.profile_description:
	#	parser.error('profile_description not given.')
	
	# concatenate type of cancer and cancer study identifier
	options.cancer_study_identifier = options.type_of_cancer + '_' + options.cancer_study_identifier
	
	
	# check logger command line arg
	numericLevel = getattr(logging, options.log_level.upper(), None)
	if not isinstance(numericLevel, int):
		raise ValueError('Invalid log level: %s' % options.log_level)
	# if log level is DEBUG give user lots of info
	if options.log_level == 'DEBUG':
	 	log_format = '%(asctime)-15s %(levelname)s  function: %(funcName)s:%(lineno)s  %(message)s'
	else: # else make logging *pretty* for user
		log_format = '%(message)s'
	
	# create logger object
	logger = logging.getLogger(__name__)
	logger.setLevel(numericLevel)
	# set up logger that writes to file
	log_file = logging.FileHandler(options.log_file)
	log_file.setLevel(numericLevel)
	log_file.setFormatter(logging.Formatter(log_format))
	# set up logger that writes to stdout
	log_stdout = logging.StreamHandler(sys.stdout)
	log_stdout.setLevel(numericLevel)
	log_stdout.setFormatter(logging.Formatter(log_format))
	# add to logger object
	logger.addHandler(log_file)
	logger.addHandler(log_stdout)

	# make sure we're working with the real thing
	check_exists_directory(options, logger)
	# let user know we're overwriting whatever exists
	check_exists_meta_study(options, logger)
	# write inputs to file
	write_meta_study_file(options, logger)
	
	# need all necessary fields per metadata file
	check_number_data_file_inputs(options, logger)
	# make sure data filenames have 'data_' prefix
	check_data_filename_prefix(options, logger)
	# segment data files need .seg extension
	check_segment_data_file_extention(options, logger)
	# need to be correct 
	check_genetic_alteration_types(options, logger)
	check_data_column_headers(options, logger)
	check_datatypes(options, logger)
	# use genetic_alteration_types and datatypes to choose 
	get_stable_id_case_list_name_desc(options, logger)
	# only certain data should show up as selectable
	get_show_profile_in_analysis_tab(options, logger)
	# write to file
	write_metadata_files(options, logger)
	# let user know we're overwriting whatever exists
	check_exists_case_lists_directory(options, logger)
	# write to file
	create_case_list_files(options, logger)
	
	print 'done!'
	sys.exit(0)


def check_exists_directory(options, logger):
	"""If directory with data does not exist, exit; else change to it"""
	if not os.path.isdir(options.directory):
		logger.critical('%s is not a valid directory. Please give path to a valid directory' % options.directory)
		sys.exit(-2)
	else:
		os.chdir(options.directory)


def check_exists_meta_study(options, logger):
	"""If meta_study.txt file exists, let user know we're overwriting"""
	meta_study_file = os.path.join(options.directory, 'meta_study.txt')
	if os.path.exists(meta_study_file):
		logger.info('%s already exists. Overwriting...' % meta_study_file)


def write_meta_study_file(options, logger):
	"""Write the fields and values needed for meta_study.txt file"""
	if (options.study_name != None) and (options.study_description != None) and (options.study_short_name != None):
		with open(os.path.join(options.directory, 'meta_study.txt'), 'w') as meta_study:
			meta_study.write('type_of_cancer: %s\n' % options.type_of_cancer)
			meta_study.write('cancer_study_identifier: %s\n' % options.cancer_study_identifier)
			meta_study.write('name: %s\n' % options.study_name)
			meta_study.write('description: %s\n' % options.study_description)
			if options.study_citation != None:
				meta_study.write('citation: %s\n' % options.study_citation)
			if options.study_pmid != None:
				meta_study.write('pmid: %s\n' % options.study_pmid)
			meta_study.write('short_name: %s\n' % options.study_short_name)
			logger.info('meta_study.txt file successfully created')
	else:
		logger.critical('meta_study.txt cannot being generated. study name, description, or short name were not supplied')


def check_number_data_file_inputs(options, logger):
	"""Check to make sure we have all metadata fields for each file supplied"""
	if options.data_file is not None:
		num_data_files = len(options.data_file)
		logger.debug('Number of data files given: %d' % num_data_files)
	else:
		logger.critical('No data files given. Exiting.')
		sys.exit(-3)
	if len(options.genetic_alteration_type) != num_data_files:
		logger.critical('Number of genetic alteration types given does not match number of data files.')
		sys.exit(-3)
	elif len(options.datatype) != num_data_files:
		logger.critical('Number of datatypes given does not match number of data files.')
		sys.exit(-3)
	elif len(options.profile_name) != num_data_files:
		logger.critical('Number of profile names given does not match number of data files.')
		sys.exit(-3)
	elif len(options.profile_description) != num_data_files:
		logger.critical('Number of profile descriptions given does not match number of data files.')
		sys.exit(-3)

		
def check_data_filename_prefix(options, logger):
	"""All data filenames need to start with 'data_'"""
	for i in range(0, len(options.data_file)):
		path, filename = os.path.split(options.data_file[i])
		if not filename.startswith('data_'):
			logger.critical('%s does not have "data_" prefix, please correct the filename' % filename)
			sys.exit(-8)


def check_segment_data_file_extention(options, logger):
	"""If segment data filename does not have .seg file extension, exit"""
	for i in range(0, len(options.data_file)):
		if options.genetic_alteration_type[i] == 'SEGMENT':
			path, extension = os.path.splitext(options.data_file[i])
			if extension != '.seg':
				logger.error('Segment data filename extension must be .seg! Please correct.')
				sys.exit(-4)


def check_genetic_alteration_types(options, logger):
	"""Check genetic alteration types given are valid genetic alteration types"""
	for i in range(0, len(options.genetic_alteration_type)):
		if options.genetic_alteration_type[i] not in cbp_common.genetic_alteration_type_list:
			logger.critical('"%s" is not a valid genetic_altertation_type. Exiting.' % options.genetic_alteration_type[i])
			sys.exit(-4)


def check_datatypes(options, logger):
	"""Check datatypes given are valid datatypes""" 
	for i in range(0, len(options.datatype)):
		if options.datatype[i] not in cbp_common.datatype_list:
			logger.critical('"%s" is not a valid datatype. Exiting.' % options.datatype[i])
			sys.exit(-6)


def __check_MAF_column_headers(file_columns, logger):
	"""Verify all necessary columns appear in MAF columns."""
	necessary_MAF_columns = ['Hugo_Symbol', 'Center', 'NCBI_Build', 'Chromosome', 'Start_Position', 'End_Position', 'Reference_Allele', 'Tumor_Seq_Allele1', 'Tumor_Sample_Barcode']	
	for col in necessary_MAF_columns:
		if col not in file_columns:
			logger.error('Missing %s in MAF header columns.' % col)
			return False
	return True


def __check_order_column_headers(required_columns, file_columns, logger):
	"""Verify order (and value) of file columns against a given set of columns."""
	if len(file_columns) < len(required_columns):
		logger.error('Format error: Number of file columns less than number of required columns.')
		return False
	for i in range(0, len(required_columns)):
		if required_columns[i] != file_columns[i]:
			logger.error('Format error: File column name [%s] does not match required column name [%s].' % (file_columns[i], required_columns[i]))
			return False
	return True


def check_data_column_headers(options, logger):
	"""Verify column headers are correct for given data type."""
	logger.debug('checking column headers...')
	for i in range(0, len(options.data_file)):
		with open(os.path.join(options.directory, options.data_file[i])) as data:
			data = csv.reader(data, delimiter = '\t')
			header = data.next()
			# all three alteration types use same format
			if options.genetic_alteration_type[i] == 'COPY_NUMBER_ALTERATION' or options.genetic_alteration_type[i] == 'MRNA_EXPRESSION' or options.genetic_alteration_type[i] == 'METHYLATION':
				if header[0] == 'Hugo_Symbol' and header[1] == 'Entrez_Gene_Id':
					continue
				elif header[0] == 'Hugo_Symbol' and header[1] != 'Entrez_Gene_Id':
					logger.warning('%s is missing "Entrez_Gene_Id" in second column' % options.data_file[i])
					continue
				else:
					logger.error('%s IS NOT FORMATTED CORRECTLY FOR GIVEN GENETIC_ALTERATION_TYPE: %s. PLEASE CORRECT.' % (options.data_file[i], options.genetic_alteration_type[i]))
					sys.exit(-5)
			elif options.genetic_alteration_type[i] == 'SEGMENT':
				segment_required_columns = ['ID', 'chrom', 'loc.start', 'loc.end', 'num.mark', 'seg.mean']
				if not __check_order_column_headers(segment_required_columns, header, logger):
					logger.error('%s IS NOT FORMATTED CORRECTLY FOR GIVEN GENETIC_ALTERATION_TYPE: %s. PLEASE CORRECT.' % (options.data_file[i], options.genetic_alteration_type[i]))
					sys.exit(-5)
			elif options.genetic_alteration_type[i] == 'MUTATION_EXTENDED':
				if not __check_MAF_column_headers(header, logger):
					logger.error('%s IS NOT FORMATTED CORRECTLY FOR GIVEN GENETIC_ALTERATION_TYPE: %s. PLEASE CORRECT.' % (options.data_file[i], options.genetic_alteration_type[i]))
					sys.exit(-5)
			elif options.genetic_alteration_type[i] == 'FUSION':
				fusion_required_columns = ['Hugo_Symbol', 'Entrez_Gene_Id', 'Center', 'Tumor_Sample_Barcode', 'Fusion', 'DNA support', 'RNA support', 'Method', 'Frame']
				if not __check_order_column_headers(fusion_required_columns, header, logger):
					logger.error('%s IS NOT FORMATTED CORRECTLY FOR GIVEN GENETIC_ALTERATION_TYPE: %s. PLEASE CORRECT.' % (options.data_file[i], options.genetic_alteration_type[i]))
					sys.exit(-5)
			elif options.genetic_alteration_type[i] == 'RPPA':
				if header[0] != 'Composite.Element.REF':
					logger.error('%s IS NOT FORMATTED CORRECTLY FOR GIVEN GENETIC_ALTERATION_TYPE: %s. PLEASE CORRECT.' % (options.data_file[i], options.genetic_alteration_type[i]))
					sys.exit(-5)	
			elif options.genetic_alteration_type[i] == 'CLINICAL':
				clinical_attribute_type = ['STRING', 'NUMBER', 'BOOLEAN']
				# look at first three lines of clinical attributes data file
				line1 = header
				line2 = data.next()
				line3 = data.next()
				# all three lines must begin with '#' symbol
				if (line1[0][0] == '#') and (line2[0][0] == '#') and (line3[0][0] == '#'):
					# first element of line3 should have '#' attached, so only check after that character
					if line3[0][1:] not in clinical_attribute_type:
						logger.error('%s IS NOT FORMATTED CORRECTLY FOR GIVEN GENETIC_ALTERATION_TYPE: %s. PLEASE CORRECT.' % (options.data_file[i], options.genetic_alteration_type[i]))
						sys.exit(-5)	
					for i in range(1, len(line3)):
						if line3[i] not in clinical_attribute_type:
							logger.error('%s IS NOT FORMATTED CORRECTLY FOR GIVEN GENETIC_ALTERATION_TYPE: %s. PLEASE CORRECT.' % (options.data_file[i], options.genetic_alteration_type[i]))
							sys.exit(-5)	
				else:
					logger.error('%s IS NOT FORMATTED CORRECTLY FOR GIVEN GENETIC_ALTERATION_TYPE: %s. PLEASE CORRECT.' % (options.data_file[i], options.genetic_alteration_type[i]))
					sys.exit(-5)	
			else:
				logger.error('%s is not a valid genetic_alteration_type. Please correct.' % options.genetic_alteration_type[i])
				sys.exit(-5)


def get_stable_id_case_list_name_desc(options, logger):
	"""Use genetic_alteration_type and datatype to choose stable_id suffix, case_list_name, case_list_description

	Instead of making user specify stable_id suffix (metadata file), 
	case_list_name (case list file), case_list_description (case list file)
	logic below selects appropriate values based on genetic_alteration_type and datatype.
	"""
	logger.debug('getting stable ids, case list names, case list descriptions...')
	for i in range(0, len(options.data_file)):
		if options.genetic_alteration_type[i] == 'COPY_NUMBER_ALTERATION':
			if options.datatype[i] == 'DISCRETE':
				stable_id_suffix = '_gistic'
				case_list_name= 'Tumors with CNA data'
				case_list_description = 'All tumors with CNA data'
			elif options.datatype[i] == 'LOG-VALUE':
				stable_id_suffix = '_log2CNA'
				case_list_name = 'Tumors with log2 copy-number data'
				case_list_description = 'All tumors with log2 copy-number data'
		elif options.genetic_alteration_type[i] == 'SEGMENT':
			stable_id_suffix = '_segment'
			case_list_name = 'Tumors with segmented copy-number'
			case_list_description = 'All tumors with segmented copy-number data'
		elif options.genetic_alteration_type[i] == 'MRNA_EXPRESSION': #TODO: let user specify platform used for generating data
			if options.datatype[i] == 'CONTINUOUS':
				stable_id_suffix = '_mrna'
				case_list_name = 'Tumors with mRNA data'
				case_list_description = 'All tumors with mRNA data'
			elif options.datatype[i] == 'Z-SCORE':
				stable_id_suffix = '_mrna_expression_Zscores'
				case_list_name = 'Tumors with mRNA data (Z-SCORE)'
				case_list_description = 'All tumors with mRNA data (Z-SCORE)'
		elif options.genetic_alteration_type[i] == 'MUTATION_EXTENDED':
			stable_id_suffix = '_mutations'
			case_list_name = 'Tumors with sequencing data'
			case_list_description = 'All tumors with sequencing data'
		elif options.genetic_alteration_type[i] == 'FUSION':
			stable_id_suffix = '_fusion'
			case_list_name = 'Tumors with fusion data'
			case_list_description = 'All tumors with fusion data'
		elif options.genetic_alteration_type[i] == 'METHYLATION': #methylation can be _methylation_hm27 or _methylation_hm450
			if options.datatype[i] == 'CONTINUOUS_hm27':
				stable_id_suffix = '_methylation_hm27' 				
				case_list_name = 'Tumors with methylation data (hm27)'
				case_list_description = 'All tumors with methylation data (hm27)'
			elif options.datatype[i] == 'CONTINUOUS_hm450':
				stable_id_suffix = '_methylation_hm450'
				case_list_name = 'Tumors with methylation data (hm450)'
				case_list_description = 'All tumors with methylation data (hm450)'
			options.datatype[i] = 'CONTINUOUS'
		elif options.genetic_alteration_type[i] == 'RPPA':
			stable_id_suffix = '_rppa'
			case_list_name = 'Tumors with RPPA data'
			case_list_description = 'All tumors with RPPA data'
		elif options.genetic_alteration_type[i] == 'CLINICAL':
			stable_id_suffix = '_clinical'
			case_list_name = 'NA'
			case_list_description = 'NA'
		else:
			logger.error('genetic_alteration_type: %s and datatype: %s are an invalid combination. Please check your input.' % options.genetic_alteration_type, options.datatype)
			sys.exit(-7)
		options.stable_id.append(options.cancer_study_identifier + stable_id_suffix)
		options.case_list_name.append(case_list_name)
		options.case_list_description.append(case_list_description)


def get_show_profile_in_analysis_tab(options, logger):
	"""If data should be selectable when querying cancer study, choose true."""
	# these are only data types that should be selectable when querying a cancer study
	show_datatypes_list = ['DISCRETE', 'Z-SCORE', 'MAF', 'FUSION']	
	for i in range(0, len(options.data_file)):
		if options.datatype[i] in show_datatypes_list:
			options.show_profile.append('true')
		else:
				options.show_profile.append('false')


def write_metadata_files(options, logger):
	"""Generate metadata file for each data file supplied.

	Metadata file values based on command line arg input.
	"""
	logger.debug('writing metadata files...')
	for i in range(0, len(options.data_file)):
		# split path and filename
		path, datafile = os.path.split(options.data_file[i])
		
		# if data filename begins with 'data_' prefix, remove before adding 'meta_'
		if datafile.startswith('data_'):
			junk, base_filename = datafile.split('data_')
			metafile = 'meta_' + base_filename
		# otherwise carry on...
		else:
			metafile = 'meta_' + datafile
		
		# if metadata file already exists, warn and overwrite
		if os.path.exists(os.path.join(options.directory, metafile)):
			logger.info('%s already exists. Overwriting...' % metafile)
		
		# for logger purposes... 
		logger.debug('cancer_study_identifier: %s' % options.cancer_study_identifier)
		logger.debug('genetic_alteration_type: %s' % options.genetic_alteration_type[i])
		logger.debug('datatype: %s' % options.datatype[i])
		logger.debug('stable_id: %s' % options.stable_id[i])
		logger.debug('show_profile_in_analysis_tab: %s' % options.show_profile[i])
		logger.debug('profile_name: %s' % options.profile_name[i])
		logger.debug('profile_description: %s' % options.profile_description[i])
		
		#print('\n%s\n' % os.path.join(path, metafile))	
		# open up new file and start writing 
		with open(os.path.join(options.directory, metafile), 'w') as meta_file:
			meta_file.write('cancer_study_identifier: %s\n' % options.cancer_study_identifier)
			meta_file.write('genetic_alteration_type: %s\n' % options.genetic_alteration_type[i])
			meta_file.write('datatype: %s\n' % options.datatype[i])
			meta_file.write('stable_id: %s\n' % options.stable_id[i])
			meta_file.write('show_profile_in_analysis_tab: %s\n' % options.show_profile[i])
			meta_file.write('profile_name: %s\n' % options.profile_name[i])
			meta_file.write('profile_description: %s\n' % options.profile_description[i])
			if options.datatype[i] == 'SEGMENT': # segment data needs additional fields
				meta_file.write('reference_genome_id: %s\n' % 'hg19')
				meta_file.write('description: Segment data for %s\n' % options.cancer_study_identifier)
				meta_file.write('data_filename: %s\n' % datafile)
		logger.info('Created %s' % metafile)


def check_exists_case_lists_directory(options, logger):
	"""If case_lists directory doesn't exist, create one."""
	case_list_dir = os.path.join(options.directory, 'case_lists')
	if not os.path.isdir(case_list_dir):
		logger.info('%s does not exist. Creating directory...' % case_list_dir)
		os.mkdir(case_list_dir)

def _write_case_list_files(study_directory, filename, cancer_study_identifier, stable_id_suffix, name, description, set_of_ids, logger):
	"""Write supplied values to correct fields in case list file"""
	with open(os.path.join(study_directory, ('case_lists/' + filename)), 'w') as case_file:
		logger.debug('Creating %s...' % ('case_lists/' + filename))
		case_file.write('cancer_study_identifier: %s\n' % cancer_study_identifier)
		case_file.write('stable_id: %s\n' % (cancer_study_identifier + stable_id_suffix))
		case_file.write('case_list_name: %s\n' % name)
		case_file.write('case_list_description: %s (%d samples)\n' % (description, len(set(set_of_ids))))
		case_file.write('case_list_ids: ' + '\t'.join(list(set_of_ids)) + '\n')
		logger.info('Created case list file: %s' % ('case_lists/' + filename))

def _get_case_list_ids(data_file, genetic_alteration_type)
	"""Find sample ids depending on datatype and return set of sample ids"""
	with open(data_file, 'r') as data:
		data = csv.reader(data, delimiter='\t')	
		try:
			# use a set so that repeat names do not occur
			case_list_ids = set()
			# first line in data file should be column headers
			header = data.next()
			
			# sample list location differs between data types
			try:
				# MUTATION_EXTENDED and FUSION data store sample names in 'Tumor_Sample_Barcode' column
				if genetic_alteration_type == 'MUTATION_EXTENDED' or genetic_alteration_type == 'FUSION':
					id_col = header.index('Tumor_Sample_Barcode')
					for line in data:
						case_list_ids.add(line[id_col])
				# SEGMENT data stores sample names in first column
				elif genetic_alteration_type == 'SEGMENT':
					id_col = header.index('ID')
					for line in data:
						case_list_ids.add(line[id_col])
				# RPPA data stores sample names as column headers (after first col)
				elif genetic_alteration_type == 'RPPA':
					id_col = header.index('Composite.Element.Ref') + 1
					case_list_ids = set(header[id_col:])
				# These data store sample names as column headers (after gene ID columns)
				elif genetic_alteration_type == 'COPY_NUMBER_ALTERATION' or genetic_alteration_type == 'MRNA_EXPRESSION' or genetic_alteration_type == 'METHYLATION':
					# if Hugo_Symbol AND Entrez_Gene_Id columns present
					if ('Hugo_Symbol' in header) and ('Entrez_Gene_Id' in header):
						if (header.index('Hugo_Symbol') < 2) and (header.index('Entrez_Gene_Id') < 2):
							id_col = 2 	
					# if we're missing 'Hugo_Symbol' column
					elif ('Hugo_Symbol' not in header) and ('Entrez_Gene_Id' in header):
						logger.debug('%s is missing "Hugo_Symbol" column' % data_file)
						if header.index('Entrez_Gene_Id') < 1:
							id_col = 1
					# if we're missing 'Entrez_Gene_Id' column
					elif ('Hugo_Symbol' in header) and ('Entrez_Gene_Id' not in header):
						logger.debug('%s is missing "Entrez_Gene_Id" column' % data_file)
						if header.index('Hugo_Symbol') < 1:
							id_col = 1
					else:
						logger.critical('Could not find "Hugo_Symbol" or "Entrez_Gene_Id" columns in %s' % data_file)
						sys.exit(-5)
					case_list_ids = set(header[id_col:])
				# CLINICAL data does not need a case list file
				elif genetic_alteration_type == 'CLINICAL':
					logger.debug('CLINICAL case list files are not generated because they are not used')
					continue
				else:
					logger.critical('%s does not meet the format requirements' % data_file)
					sys.exit(-5)
			
			except ValueError:
					logger.critical(ValueError)
					logger.critical('%s does not meet the format requirements. Could not find sample names in file.' % data_file)
					sys.exit(-5)
		except csv.Error as e:
			logger.critical(e)
			sys.exit(-1)

def create_case_list_files(options, logger):
	"""Create a case list file for each data file supplied.

	Each case list file contains a tab-delimited list of all sample names that 
	appear in the corresponding data file (case_list_ids field), in addition to
	other metadata about the sample set.
	A cases_all.txt file is also generated, case_list_ids are created by adding
	all sample names to a python set, so that no sample names are repeated.
	"""
	logger.debug('writing case list files...')
	# use a set so that repeat sample names do not occur
	cases_all = set() # all samples in study
	cases_mutation_and_gistic = set() # all samples with mutation and gistic data (sequencing and CNA)
	write_cases_mutation_and_gistic = 'FALSE' # flag changes when we have both mutation and gistic added to set
	cases_complete = set() # all samples with mutation, gistic, and mRNA expression data 
	# iterate through all data files
	for i in range(0, len(options.data_file)):
		path, datafile = os.path.split(options.data_file[i])

		# case list filenames should be 'cases_' prefix + base filename
		if datafile.startswith('data_'):
			junk, base_filename = datafile.split('data_')
			case_list_file = 'cases_' + base_filename
		else:
			logging.critical('%s does not have "data_" prefix. Please add this to the filename' % datafile)
			sys.exit(-8)		
	
		# case list filenames must have .txt file extension for importer tool 
		if os.path.splitext(case_list_file)[1] != '.txt':
			case_list_file = case_list_file + '.txt'
		
		# if the case list file for data file already exists, warn user
		if os.path.exists(os.path.join(options.directory, ('case_lists/' + case_list_file))):
			logger.info('%s already exists. Overwriting...' % case_list_file)

		with open(options.data_file[i], 'r') as data:
			data = csv.reader(data, delimiter='\t')	
			try:
				# use a set so that repeat names do not occur
				case_list_ids = set()
				# first line in data file should be column headers
				header = data.next()
				
				# sample list location differs between data types
				# MUTATION_EXTENDED and FUSION data store sample names in 'Tumor_Sample_Barcode' column
				if options.genetic_alteration_type[i] == 'MUTATION_EXTENDED' or options.genetic_alteration_type[i] == 'FUSION':
					id_col = header.index('Tumor_Sample_Barcode')
					for line in data:
						case_list_ids.add(line[id_col])
				# SEGMENT data stores sample names in first column
				elif options.genetic_alteration_type[i] == 'SEGMENT':
					for line in data:
						case_list_ids.add(line[0])
				# RPPA data stores sample names as column headers (after first col)
				elif options.genetic_alteration_type[i] == 'RPPA':
					case_list_ids = set(header[1:])
				# These data store sample names as column headers (after gene ID columns)
				elif options.genetic_alteration_type[i] == 'COPY_NUMBER_ALTERATION' or options.genetic_alteration_type[i] == 'MRNA_EXPRESSION' or options.genetic_alteration_type[i] == 'METHYLATION':
					# if Hugo_Symbol AND Entrez_Gene_Id columns present
					if header[0] == 'Hugo_Symbol' and header[1] == 'Entrez_Gene_Id':
						case_list_ids = set(header[2:])
					# if we're missing 'Entrez_Gene_Id' column
					elif header[0] == 'Hugo_Symbol' and header[1] != 'Entrez_Gene_Id':
						case_list_ids = set(header[1:])
					# if 'Entrez_Gene_Id' is first col and 'Hugo_Symbol' is second col
					elif header[0] == 'Entrez_Gene_Id' and header[1] == 'Hugo_Symbol':
						case_list_ids = set(header[2:])
					# if we're missing 'Hugo_Symbol' but have 'Entrez_Gene_Id'
					elif header[0] == 'Entrez_Gene_Id' and header[1] != 'Hugo_Symbol':
						case_list_ids = set(header[1:])
				# CLINICAL data does not need a case list file
				elif options.genetic_alteration_type[i] == 'CLINICAL':
					logger.debug('CLINICAL case list files are not generated because they are not used')
					continue
				else:
					logger.critical('%s does not meet the format requirements' % options.data_file[i])
					sys.exit(-5)

				
				# need to change some of the stable_ids in order for sample counts to show up in Data Sets tab
				if options.genetic_alteration_type[i] == 'MUTATION_EXTENDED':
					options.stable_id = options.cancer_study_identifier + '_sequenced'
				elif options.genetic_alteration_type[i] == 'COPY_NUMBER_ALTERATION' and options.datatype[i] == 'DISCRETE':
					options.stable_id = options.cancer_study_identifier + '_cna'
			

					
				# add case_list_ids to set containing all sample names
				cases_all.update(case_list_ids)
				
				logger.debug('number of cases for %s: %d' % (options.stable_id[i], len(case_list_ids)))
		
				# add case_list_ids to set containing ids with BOTH mutation and gistic data
				if options.genetic_alteration_type[i] == 'MUTATION_EXTENDED' or (options.genetic_alteration_type[i] == 'COPY_NUMBER_ALTERATION' and options.datatype[i] == 'DISCRETE'):
					if len(cases_mutation_and_gistic) == 0:
						cases_mutation_and_gistic.update(case_list_ids)
					else:
						cases_mutation_and_gistic = cases_mutation_and_gistic.intersection(case_list_ids)
						write_cases_mutation_and_gistic = 'TRUE' # we've added both datasets to set, so we can write file
						logger.debug('write_cases_mutation_and_gistic flag thrown... cases_sequenced_and_cna.txt should be created.')			
					logger.debug('len cases_mutation_and_gistic: %d' % len(cases_mutation_and_gistic))
				# add case_list_ids to set containing ids with mutation, gistic, AND mRNA data
				if options.genetic_alteration_type[i] == 'MUTATION_EXTENDED' or (options.genetic_alteration_type[i] == 'COPY_NUMBER_ALTERATION' and options.datatype[i] == 'DISCRETE') or options.genetic_alteration_type[i] == 'MRNA_EXPRESSION':
					if len(cases_complete) == 0:
						cases_complete.update(case_list_ids)
					else:
						cases_complete = cases_complete.intersection(case_list_ids)
					logger.debug('len cases_complete: %d' % len(cases_complete))


				# write case list file for each data file
				with open(os.path.join(options.directory, ('case_lists/' + case_list_file)), 'w') as case_file:
					case_file.write('cancer_study_identifier: %s\n' % options.cancer_study_identifier)
					case_file.write('stable_id: %s\n' % options.stable_id[i])
					case_file.write('case_list_name: %s\n' % options.case_list_name[i])
					case_file.write('case_list_description: %s (%d samples)\n' % (options.case_list_description[i], len(case_list_ids)))
					case_file.write('case_list_ids: ' + '\t'.join(list(case_list_ids)) + '\n')
					logger.info('Created case list file: %s' % case_list_file)

			except csv.Error as e:
				logger.critical(e)
				sys.exit(-1)
	logger.debug('number of mut and gis: %d\t number of complete: %d' % (len(cases_mutation_and_gistic), len(cases_complete)))
	# get path to data directory
	#path = os.path.dirname(options.data_file[0])
	# write cases_all.txt file 
#	with open(os.path.join(options.directory, ('case_lists/cases_all.txt')), 'w') as case_file:
#		logger.debug('Creating cases_all.txt...')
#		case_file.write('cancer_study_identifier: %s\n' % options.cancer_study_identifier)
#		case_file.write('stable_id: %s\n' % (options.cancer_study_identifier + '_all'))
#		case_file.write('case_list_name: %s\n' % 'All tumors')
#		case_file.write('case_list_description: %s (%d samples)\n' % ('All tumor samples', len(set(cases_all))))
#		case_file.write('case_list_ids: ' + '\t'.join(list(cases_all)) + '\n')
#		logger.info('Created case list file: %s' % 'cases_all.txt')
	_write_case_list_files(options.directory, 'cases_all.txt', options.cancer_study_identifier, '_all', 'All tumors', 'All tumor samples', cases_all, logger)
	# write cases_sequenced_and_cna.txt file (if applicable)	
	if write_cases_mutation_and_gistic == 'TRUE':
		with open(os.path.join(options.directory, ('case_lists/cases_sequenced_and_cna.txt')), 'w') as case_file:
			logger.debug('Creating cases_all.txt...')
			case_file.write('cancer_study_identifier: %s\n' % options.cancer_study_identifier)
			case_file.write('stable_id: %s\n' % (options.cancer_study_identifier + '_sequenced_and_cna'))
			case_file.write('case_list_name: %s\n' % 'All tumors with sequencing and CNA')
			case_file.write('case_list_description: %s (%d samples)\n' % ('All tumor samples with sequencing and GISTIC copy number data', len(set(cases_mutation_and_gistic))))
			case_file.write('case_list_ids: ' + '\t'.join(list(cases_mutation_and_gistic)) + '\n')
			logger.info('Created case list file: %s' % 'cases_mutation_and_gistic.txt')
	# write cases_complete.txt (if applicable); we should have above case list file AND have more samples because of added mRNA sample list
	if (write_cases_mutation_and_gistic == 'TRUE') and (len(cases_complete) > len(cases_mutation_and_gistic)):
		with open(os.path.join(options.directory, ('case_lists/cases_complete.txt')), 'w') as case_file:
			logger.debug('Creating cases_all.txt...')
			case_file.write('cancer_study_identifier: %s\n' % options.cancer_study_identifier)
			case_file.write('stable_id: %s\n' % (options.cancer_study_identifier + '_3way_complete'))
			case_file.write('case_list_name: %s\n' % 'All tumors with mRNA, CNA, & sequencing')
			case_file.write('case_list_description: %s (%d samples)\n' % ('All tumor samples with mRNA expression data, GISTIC copynumber data, & sequencing data', len(set(cases_complete))))
			case_file.write('case_list_ids: ' + '\t'.join(list(cases_complete)) + '\n')
			logger.info('Created case list file: %s' % 'cases_complete.txt')

if __name__ == '__main__':
	main()
